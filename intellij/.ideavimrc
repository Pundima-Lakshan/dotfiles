" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc


"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch

" Don't use Ex mode, use Q for formatting.
map Q gq

" turn relative line numbers on
set relativenumber number

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Highlight copied text
Plug 'machakann/vim-highlightedyank'
" Commentary plugin
Plug 'tpope/vim-commentary'


"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)

" Set leader key to Space
let mapleader = " "

" Enable search highlighting
set hlsearch

" Consider cases only if search text contains uppercase letters
set ic
set smartcase

" Normal mode key bindings

" Clear search results
nnoremap <C-l> :noh<CR>

" Switch between buffers
nnoremap <S-h> :bprevious<CR>
nnoremap <S-l> :bnext<CR>

" Splits
nnoremap <leader>v :vsplit<CR>
nnoremap <leader>s :split<CR>

" Pane navigation
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

" Remove arrow keys from navigation
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Nice to have
nnoremap <leader>w :w!<CR>
nnoremap <leader>q :q!<CR>
nnoremap <leader>x :x!<CR>
nnoremap [d :cprev<CR>
nnoremap ]d :cnext<CR>
nnoremap <leader>ca :<C-U>call ide#QuickFix()<CR>
nnoremap <leader>f :action QuickOpen<CR>
nnoremap <leader>p :action ReformatCode<CR>
nnoremap gh :action ShowDefinitionPreview<CR>

" Visual mode key bindings

" Stay in visual mode while indenting
vnoremap < <gv
vnoremap > >gv

" Move selected lines while staying in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Toggle comment selection
vnoremap <leader>c :action CommentByLineComment<CR>

" Remap 'c' to change without affecting the register
nnoremap c "_c
vnoremap c "_c

" Remap 'd' in Visual mode to delete to the black hole register
vnoremap d "_d

" Remap 'd' in Normal mode to delete to the black hole register
nnoremap d "_d

" Remap 'p' in visual mode to avoid replacing the register with the deleted text
vnoremap p "_c<Esc>

" Replace visual selection with paste, without overwriting clipboard
vnoremap p "_dP

set clipboard=unnamedplus
set clipboard+=ideaput

" ~/.ideavimrc

" Set leader key (optional, but matches your Neovim setup)
set leader=<Space>

" --- Tab (Buffer) Management ---

" Save current tab (like :w)
" Maps <Space>bs to IntelliJ's SaveDocument action
map <leader>bs <Action>(SaveDocument)
" Alternative: Save all files
" map <leader>bs <Action>(SaveAll)

" Close current tab (like :bd)
" Maps <Space>bd to IntelliJ's CloseActiveEditor action
map <leader>bd <Action>(CloseEditor) " Or CloseActiveEditor

" Switch to previously active tab (like :e# or <Space>bb)
" Maps <Space>bb to RecentFiles action, which is similar
map <leader>bb <Action>(RecentFiles)

" --- Searching ---

" Find Files (Filename Search - like Telescope find_files)
" Maps <Space>ff to IntelliJ's GotoFile action (usually Ctrl+Shift+N)
map <leader>ff <Action>(GotoFile)

" Search in current file (Tab Content - like / or ?)
" Standard Vim / and ? usually work for this.
" If you want <Space>sw for consistency:
map <leader>sw <Action>(Find) " Maps to IntelliJ's Find action (Ctrl+F)

" Search in All Files (Project Grep - like Telescope live_grep)
" Maps <Space>sg to IntelliJ's FindInPath action (Ctrl+Shift+F)
map <leader>sg <Action>(FindInPath)
" You also had <Space>/ mapped to grep, you could add this too:
map <leader>/ <Action>(FindInPath)

" Replace in current file (Tab Content)
" Standard Vim :%s/old/new/g works.
" For consistency with <Space>sr:
map <leader>sr <Action>(Replace) " Maps to IntelliJ's Replace action (Ctrl+R)

" Replace in All Files (Project Replace)
" Let's use <Space>sR (Shift+R) for global replace, as <Space>sr is local
map <leader>sR <Action>(ReplaceInPath) " Maps to IntelliJ's ReplaceInPath action (Ctrl+Shift+R)

" --- Code Navigation ---

" Go to Definition (like LSP gd)
" Standard 'gd' often works in IdeaVim if configured. If not, map explicitly.
" IntelliJ's GotoDeclaration action (Ctrl+B or Ctrl+Click)
map gd <Action>(GotoDeclaration)

" Go to Occurrences/Usages (like LSP gr or Trouble)
" Standard 'gr' might work. Alternatively, use <Space>cS like your Trouble mapping.
" IntelliJ's ShowUsages action (Alt+F7 for popup/list) is often useful.
map <leader>cS <Action>(ShowUsages)
" Or map 'gr' if it doesn't work by default:
" map gr <Action>(ShowUsages)
" Alternative: FindUsages opens the full tool window (Shift+Alt+F7)
" map <leader>cS <Action>(FindUsages)

" --- Project & UI ---

" Open/Close Project Directory View (like Neotree <Space>e)
" Maps <Space>e to IntelliJ's ActivateProjectToolWindow action (Alt+1)
map <leader>e <Action>(ActivateProjectToolWindow)

" Open/Close Terminal (like <Space>ft)
" Maps <Space>ft to IntelliJ's ActivateTerminalToolWindow action (Alt+F12)
map <leader>ft <Action>(ActivateTerminalToolWindow)

" --- Other Sensible Shortcuts ---

" Reformat Code (like <Space>cf)
" Maps <Space>cf to IntelliJ's ReformatCode action (Ctrl+Alt+L)
map <leader>cf <Action>(ReformatCode)

" Show Intention Actions / Quick Fixes (like LSP code actions)
" Standard Alt+Enter usually works. If you want a Vim mapping:
map <leader>ca <Action>(ShowIntentionActions) " ca for Code Actions

" Rename (like LSP rename <Space>cr)
" Standard Shift+F6 usually works. If you want a Vim mapping:
map <leader>cr <Action>(RenameElement) " cr for Code Rename

" Git: Show Version Control window (closest generic to Lazygit/Telescope Git)
map <leader>gg <Action>(ActivateVersionControlToolWindow)
map <leader>gs <Action>(ActivateVersionControlToolWindow)

" Git: Commit
map <leader>gc <Action>(CheckinProject) " Ctrl+K

" Git: Annotate / Blame (like <Space>gb)
map <leader>gb <Action>(Annotate)

" Navigate Tabs (like H/L or [b/]b for buffers)
" Map H/L directly to Previous/Next Tab actions
map H <Action>(PreviousTab)
map L <Action>(NextTab)
" Alternative using [b and ]b like your Neovim setup
" map [b <Action>(PreviousTab)
" map ]b <Action>(NextTab)

" Navigate Diagnostics/Errors (like [d/]d)
map [d <Action>(GotoPreviousError) " F2 / Shift+F2 are defaults
map ]d <Action>(GotoNextError)

" Window Splitting (different concept than tabs/buffers, but often used)
" Map <Space>| and <Space>- like your Neovim splits
map <leader>\| <Action>(SplitVertically)
map <leader>- <Action>(SplitHorizontally)
" Note: <C-W> mappings often work by default in IdeaVim for splits

" --- End of ~/.ideavimrc ---
